(defun new-coord (instr coord)
  (case instr
    (#\v (list (first coord) (1+ (second coord))))
    (#\^ (list (first coord) (1- (second coord))))
    (#\> (list (1+ (first coord)) (second coord)))
    (#\< (list (1- (first coord)) (second coord)))))

(defun part1 (str)
  (let* ((coord (list 0 0))
         (visited (make-hash-table :test #'equal)))
    (setf (gethash coord visited) t)
    (dotimes (idx (length str))
      (setf coord (new-coord (aref str idx) coord))
      (if (not (gethash coord visited)) (setf (gethash coord visited) t)))
    (hash-table-count visited)))


(defun part2 (str)
  (let* ((coord (list 0 0))
         (r-coord (list 0 0))
         (visited (make-hash-table :test #'equal)))
    (setf (gethash coord visited) t)
    (dotimes (idx (length str))
      (if (evenp idx)
          (progn (setf coord (new-coord (aref str idx) coord))
                 (if (not (gethash coord visited)) (setf (gethash coord visited) t)))
          (progn (setf r-coord (new-coord (aref str idx) r-coord))
                 (if (not (gethash r-coord visited)) (setf (gethash r-coord visited) t)))))
    (hash-table-count visited)))
